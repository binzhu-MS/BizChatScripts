{
    "version": "0.2.0",
    "inputs": [
        {
            "id": "emailAccount",
            "description": "Enter the email account to extract emails for",
            "default": "johndoe",
            "type": "promptString"
        }
    ],
    "configurations": [
        // ============================================
        // EXAMPLES - Framework Demonstrations
        // ============================================
        {
            "name": "📚 Example: Text Summarizer",
            "type": "debugpy",
            "request": "launch",
            "program": "${workspaceFolder}/using_llms/example_text_summarizer.py",
            "args": [
                "${workspaceFolder}/examples/example_summarization_input.json",
                "--output_file=${workspaceFolder}/examples/example_summarization_output.json",
                "--threads=2",
                "--retries=3",
                "--max_items=3"
            ],
            "console": "integratedTerminal",
            "cwd": "${workspaceFolder}",
            "justMyCode": true,
            "env": {
                "PYTHONPATH": "${workspaceFolder}"
            }
        },
        {
            "name": "📚 Example: RSP Scorer",
            "type": "debugpy",
            "request": "launch",
            "program": "${workspaceFolder}/using_llms/example_rsp_scorer.py",
            "args": [
                "${workspaceFolder}/examples/example_rsp_scoring_input.json",
                "--output_file=${workspaceFolder}/examples/example_rsp_scoring_output.json",
                "--threads=3",
                "--retries=2",
                "--max_items=3"
            ],
            "console": "integratedTerminal",
            "cwd": "${workspaceFolder}",
            "justMyCode": true,
            "env": {
                "PYTHONPATH": "${workspaceFolder}"
            }
        },
        {
            "name": "� Example: Simple Scorer (RSP)",
            "type": "debugpy",
            "request": "launch",
            "program": "${workspaceFolder}/using_llms/example_simple_scorer.py",
            "args": [
                "${workspaceFolder}/examples/example_simple_scorer_input.json",
                "--output_file=${workspaceFolder}/examples/example_simple_scorer_rsp_output.json",
                "--threads=2",
                "--retries=3",
                "--client_type=rsp"
            ],
            "console": "integratedTerminal",
            "cwd": "${workspaceFolder}",
            "justMyCode": true,
            "env": {
                "PYTHONPATH": "${workspaceFolder}"
            }
        },
        {
            "name": "📊 Example: Simple Scorer (Microsoft LLM API Client)",
            "type": "debugpy",
            "request": "launch",
            "program": "${workspaceFolder}/using_llms/example_simple_scorer.py",
            "args": [
                "${workspaceFolder}/examples/example_simple_scorer_input.json",
                "--output_file=${workspaceFolder}/examples/example_simple_scorer_ms_api_output.json",
                "--threads=2",
                "--retries=3",
                "--client_type=ms_llm_client"
            ],
            "console": "integratedTerminal",
            "cwd": "${workspaceFolder}",
            "justMyCode": true,
            "env": {
                "PYTHONPATH": "${workspaceFolder}"
            }
        },
        {
            "name": "📊 Example: Simple Scorer (Unified Client)",
            "type": "debugpy",
            "request": "launch",
            "program": "${workspaceFolder}/using_llms/example_simple_scorer.py",
            "args": [
                "${workspaceFolder}/examples/example_simple_scorer_input.json",
                "--output_file=${workspaceFolder}/examples/example_simple_scorer_unified_output.json",
                "--threads=2",
                "--retries=3",
                "--client_type=unified"
            ],
            "console": "integratedTerminal",
            "cwd": "${workspaceFolder}",
            "justMyCode": true,
            "env": {
                "PYTHONPATH": "${workspaceFolder}"
            }
        },
        {
            "name": "�📚 Example: Direct API Usage",
            "type": "debugpy",
            "request": "launch",
            "program": "${workspaceFolder}/using_llms/example_direct_api.py",
            "args": [
                "${workspaceFolder}/examples/example_direct_api_input.json",
                "--output_file=${workspaceFolder}/examples/example_direct_api_output.json",
                "--temperature=0.3",
                "--max_tokens=1000"
            ],
            "console": "integratedTerminal",
            "cwd": "${workspaceFolder}",
            "justMyCode": true,
            "env": {
                "PYTHONPATH": "${workspaceFolder}"
            }
        },
        {
            "name": "📚 Example: Direct API Usage (Custom Model)",
            "type": "debugpy",
            "request": "launch",
            "program": "${workspaceFolder}/using_llms/example_direct_api.py",
            "args": [
                "${workspaceFolder}/examples/example_direct_api_input.json",
                "--output_file=${workspaceFolder}/examples/example_direct_api_custom_output.json",
                "--model=dev-gpt-41-longco-2025-04-14",
                "--temperature=0.7",
                "--max_tokens=2000"
            ],
            "console": "integratedTerminal",
            "cwd": "${workspaceFolder}",
            "justMyCode": true,
            "env": {
                "PYTHONPATH": "${workspaceFolder}"
            }
        },
        {
            "name": "📚 Example: Text Summarizer (Microsoft LLM API Client)",
            "type": "debugpy",
            "request": "launch",
            "program": "${workspaceFolder}/using_llms/example_text_summarizer.py",
            "args": [
                "${workspaceFolder}/examples/example_summarization_input.json",
                "--output_file=${workspaceFolder}/examples/example_summarization_ms_api_output.json",
                "--threads=2",
                "--retries=3",
                "--max_items=3",
                "--client_type=ms_llm_client"
            ],
            "console": "integratedTerminal",
            "cwd": "${workspaceFolder}",
            "justMyCode": true,
            "env": {
                "PYTHONPATH": "${workspaceFolder}"
            }
        },
        {
            "name": "📚 Example: Text Summarizer (Unified Client)",
            "type": "debugpy",
            "request": "launch",
            "program": "${workspaceFolder}/using_llms/example_text_summarizer.py",
            "args": [
                "${workspaceFolder}/examples/example_summarization_input.json",
                "--output_file=${workspaceFolder}/examples/example_summarization_unified_output.json",
                "--threads=2",
                "--retries=3",
                "--max_items=3",
                "--client_type=unified"
            ],
            "console": "integratedTerminal",
            "cwd": "${workspaceFolder}",
            "justMyCode": true,
            "env": {
                "PYTHONPATH": "${workspaceFolder}"
            }
        },
        {
            "name": "📚 Example: RSP Scorer (Unified Client)",
            "type": "debugpy",
            "request": "launch",
            "program": "${workspaceFolder}/using_llms/example_rsp_scorer.py",
            "args": [
                "${workspaceFolder}/examples/example_rsp_scoring_input.json",
                "--output_file=${workspaceFolder}/examples/example_rsp_scoring_unified_output.json",
                "--threads=3",
                "--retries=2",
                "--max_items=3",
                "--client_type=unified"
            ],
            "console": "integratedTerminal",
            "cwd": "${workspaceFolder}",
            "justMyCode": true,
            "env": {
                "PYTHONPATH": "${workspaceFolder}"
            }
        },
        {
            "name": "📊 Example: Simple Scorer (RSP)",
            "type": "debugpy",
            "request": "launch",
            "program": "${workspaceFolder}/using_llms/example_simple_scorer.py",
            "args": [
                "${workspaceFolder}/examples/example_simple_scorer_input.json",
                "--output_file=${workspaceFolder}/examples/example_simple_scorer_rsp_output.json",
                "--threads=2",
                "--retries=3",
                "--client_type=rsp"
            ],
            "console": "integratedTerminal",
            "cwd": "${workspaceFolder}",
            "justMyCode": true,
            "env": {
                "PYTHONPATH": "${workspaceFolder}"
            }
        },
        {
            "name": "📊 Example: Simple Scorer (Microsoft LLM API Client)",
            "type": "debugpy",
            "request": "launch",
            "program": "${workspaceFolder}/using_llms/example_simple_scorer.py",
            "args": [
                "${workspaceFolder}/examples/example_simple_scorer_input.json",
                "--output_file=${workspaceFolder}/examples/example_simple_scorer_ms_api_output.json",
                "--threads=2",
                "--retries=3",
                "--client_type=ms_llm_client"
            ],
            "console": "integratedTerminal",
            "cwd": "${workspaceFolder}",
            "justMyCode": true,
            "env": {
                "PYTHONPATH": "${workspaceFolder}"
            }
        },
        {
            "name": "📊 Example: Simple Scorer (Unified Client)",
            "type": "debugpy",
            "request": "launch",
            "program": "${workspaceFolder}/using_llms/simple_scorer.py",
            "args": [
                "--threads=2",
                "--retries=3",
                "--client_type=unified"
            ],
            "console": "integratedTerminal",
            "cwd": "${workspaceFolder}",
            "justMyCode": true,
            "env": {
                "PYTHONPATH": "${workspaceFolder}"
            }
        },
        // ============================================
        // TESTING - Utility Tests and Validation
        // ============================================
        {
            "name": "🧪 Test: File Reader - Complete Analysis (All Files)",
            "type": "debugpy",
            "request": "launch",
            "program": "${workspaceFolder}/tests/test_file_reader.py",
            "args": [
                "--full"
            ],
            "console": "integratedTerminal",
            "cwd": "${workspaceFolder}",
            "justMyCode": true,
            "env": {
                "PYTHONPATH": "${workspaceFolder}"
            },
            "postDebugTask": "Open File Reader Results"
        },
        // ============================================
        // PRODUCTION APPLICATIONS
        // ============================================
        {
            "name": "Utterance Complexity Classifier",
            "type": "debugpy",
            "request": "launch",
            "program": "${workspaceFolder}/using_llms/utterance_complexity_classifier.py",
            "args": [
                "--input_file=${workspaceFolder}/projects/gpt5_select_complex_utterances/data/multiple_tool_call_utterance_for_all_segments.json",
                "--max_utterances=10",
                "--threads=3",
                "--retries=3",
                "--save_batch_size=3",
                "--incremental_save=True",
            ],
            "console": "integratedTerminal",
            "cwd": "${workspaceFolder}",
            "justMyCode": true,
            "env": {
                "PYTHONPATH": "${workspaceFolder}"
            }
        },
        {
            "name": "Extract Utterance Templates",
            "type": "debugpy",
            "request": "launch",
            "program": "${workspaceFolder}/projects/personalization/extract_templates.py",
            "args": [
                "--input_file",
                "${workspaceFolder}/projects/personalization/data/binzhu-personalized-1k_golden_query-set-20250729163610.tsv",
                "--output_file",
                "${workspaceFolder}/projects/personalization/data/results/extracted_templates.tsv",
                "--column",
                "1"
            ],
            "console": "integratedTerminal"
        },
        {
            "name": "Utterance Personalizer (Test)",
            "type": "debugpy",
            "request": "launch",
            "program": "${workspaceFolder}/using_llms/utterance_personalizer.py",
            "args": [
                "${workspaceFolder}/projects/personalization/data/2276_test.tsv",
                "${workspaceFolder}/projects/personalization/data/results/2276_test_templated.tsv",
                "--threads=3",
                "--retries=3"
            ],
            "console": "integratedTerminal",
            "cwd": "${workspaceFolder}",
            "justMyCode": true,
            "env": {
                "PYTHONPATH": "${workspaceFolder}"
            }
        },
        {
            "name": "Utterance Personalizer (Full)",
            "type": "debugpy",
            "request": "launch",
            "program": "${workspaceFolder}/using_llms/utterance_personalizer.py",
            "args": [
                "${workspaceFolder}/projects/personalization/data/2276.tsv",
                "${workspaceFolder}/projects/personalization/data/results/2276_templated.tsv",
                "--threads=3",
                "--retries=3"
            ],
            "console": "integratedTerminal",
            "cwd": "${workspaceFolder}",
            "justMyCode": true,
            "env": {
                "PYTHONPATH": "${workspaceFolder}"
            }
        },
        {
            "name": "Run Example Text Summarizer",
            "type": "debugpy",
            "request": "launch",
            "program": "${workspaceFolder}/using_llms/example_text_summarizer.py",
            "console": "integratedTerminal",
            "cwd": "${workspaceFolder}",
            "justMyCode": true,
            "env": {
                "PYTHONPATH": "${workspaceFolder}"
            }
        },
        {
            "name": "Run Custom Applier",
            "type": "debugpy",
            "request": "launch",
            "program": "${workspaceFolder}/using_llms/example_custom_applier.py",
            "console": "integratedTerminal",
            "cwd": "${workspaceFolder}",
            "justMyCode": true,
            "env": {
                "PYTHONPATH": "${workspaceFolder}"
            }
        },
        {
            "name": "Analyze Complexity Statistics",
            "type": "debugpy",
            "request": "launch",
            "program": "${workspaceFolder}/projects/gpt5_select_complex_utterances/complexity_statistics.py",
            "args": [
                "--input_file=${workspaceFolder}/projects/gpt5_select_complex_utterances/data/results/multiple_tool_call_utterance_for_all_segments_labeled_gpt4_1.json",
                "--output_file=${workspaceFolder}/projects/gpt5_select_complex_utterances/data/statistics_report.json",
                "--show_detailed_stats=False",
                "--create_plots=True",
                "--plot_output_dir=${workspaceFolder}/projects/gpt5_select_complex_utterances/data/plots"
            ],
            "console": "integratedTerminal",
            "cwd": "${workspaceFolder}",
            "justMyCode": true,
            "env": {
                "PYTHONPATH": "${workspaceFolder}"
            }
        },
        {
            "name": "Extract CoT Data to Playground Format",
            "type": "debugpy",
            "request": "launch",
            "program": "${workspaceFolder}/projects/gpt5_select_complex_utterances/extract_data_to_playground_format.py",
            "args": [
                "--input_file=${workspaceFolder}/projects/gpt5_select_complex_utterances/data/results/multiple_tool_call_utterance_for_all_segments_labeled_gpt4_1.json",
                "--output_file=${workspaceFolder}/projects/gpt5_select_complex_utterances/data/playground_cot_data.json",
                "--classification=cot",
                "--source=gpt4-classification",
                "--show_stats=True"
            ],
            "console": "integratedTerminal",
            "cwd": "${workspaceFolder}",
            "justMyCode": true,
            "env": {
                "PYTHONPATH": "${workspaceFolder}"
            }
        },
        {
            "name": "Extract Chat Data to Playground Format",
            "type": "debugpy",
            "request": "launch",
            "program": "${workspaceFolder}/projects/gpt5_select_complex_utterances/extract_data_to_playground_format.py",
            "args": [
                "--input_file=${workspaceFolder}/projects/gpt5_select_complex_utterances/data/results/multiple_tool_call_utterance_for_all_segments_labeled_gpt4_1.json",
                "--output_file=${workspaceFolder}/projects/gpt5_select_complex_utterances/data/playground_chat_data.json",
                "--classification=chat",
                "--source=gpt4-classification",
                "--show_stats=True"
            ],
            "console": "integratedTerminal",
            "cwd": "${workspaceFolder}",
            "justMyCode": true,
            "env": {
                "PYTHONPATH": "${workspaceFolder}"
            }
        },
        {
            "name": "Extract All Data to Playground Format",
            "type": "debugpy",
            "request": "launch",
            "program": "${workspaceFolder}/projects/gpt5_select_complex_utterances/extract_data_to_playground_format.py",
            "args": [
                "--input_file=${workspaceFolder}/projects/gpt5_select_complex_utterances/data/results/multiple_tool_call_utterance_for_all_segments_labeled_gpt4_1.json",
                "--output_file=${workspaceFolder}/projects/gpt5_select_complex_utterances/data/playground_all_data.json",
                "--classification=all",
                "--source=gpt4-classification",
                "--show_stats=True"
            ],
            "console": "integratedTerminal",
            "cwd": "${workspaceFolder}",
            "justMyCode": true,
            "env": {
                "PYTHONPATH": "${workspaceFolder}"
            }
        },
        {
            "name": "Parse Playground Results",
            "type": "debugpy",
            "request": "launch",
            "program": "${workspaceFolder}/projects/gpt5_select_complex_utterances/parse_playground_results.py",
            "args": [
                "--input_file=${workspaceFolder}/projects/gpt5_select_complex_utterances/data/cot_playground_output_4313.json",
                "--output_file=${workspaceFolder}/projects/gpt5_select_complex_utterances/data/results/parsed_cot_playground_output_4313.json",
                "--show_stats=True"
            ],
            "console": "integratedTerminal",
            "cwd": "${workspaceFolder}",
            "justMyCode": true,
            "env": {
                "PYTHONPATH": "${workspaceFolder}"
            }
        },
        {
            "name": "Analyze Playground Results Statistics",
            "type": "debugpy",
            "request": "launch",
            "program": "${workspaceFolder}/projects/gpt5_select_complex_utterances/playground_results_statistics.py",
            "args": [
                "--input_file=${workspaceFolder}/projects/gpt5_select_complex_utterances/data/results/filtered_optimal_switching_results.json",
                "--output_prefix=${workspaceFolder}/projects/gpt5_select_complex_utterances/data/results/playground_statistics_report",
                "--show_detailed_stats=True",
                "--create_plots=True",
                "--plot_output_dir=${workspaceFolder}/projects/gpt5_select_complex_utterances/data/results/plots"
            ],
            "console": "integratedTerminal",
            "cwd": "${workspaceFolder}",
            "justMyCode": true,
            "env": {
                "PYTHONPATH": "${workspaceFolder}"
            }
        },
        {
            "name": "Filter Optimal Switching Utterances",
            "type": "debugpy",
            "request": "launch",
            "program": "${workspaceFolder}/projects/gpt5_select_complex_utterances/filter_optimal_switching.py",
            "args": [
                "--input_file=${workspaceFolder}/projects/gpt5_select_complex_utterances/data/results/parsed_cot_playground_output_4313.json",
                "--optimal_switching_file=${workspaceFolder}/projects/gpt5_select_complex_utterances/data/Merged_Optimal_Switching.json",
                "--output_file=${workspaceFolder}/projects/gpt5_select_complex_utterances/data/results/filtered_optimal_switching_results.json",
                "--show_summary=True"
            ],
            "console": "integratedTerminal",
            "cwd": "${workspaceFolder}",
            "justMyCode": true,
            "env": {
                "PYTHONPATH": "${workspaceFolder}"
            }
        },
        {
            "name": "Create Test Data for Utterance Selector",
            "type": "debugpy",
            "request": "launch",
            "program": "${workspaceFolder}/projects/gpt5_select_complex_utterances/testdata_for_utterance_selector.py",
            "args": [
                "--input_file=${workspaceFolder}/projects/gpt5_select_complex_utterances/data/results/filtered_optimal_switching_results.json",
                "--output_file=${workspaceFolder}/projects/gpt5_select_complex_utterances/data/results/test_data_top3_categories.json",
                "--top_categories=3"
            ],
            "console": "integratedTerminal",
            "cwd": "${workspaceFolder}",
            "justMyCode": true,
            "env": {
                "PYTHONPATH": "${workspaceFolder}"
            }
        },
        {
            "name": "Utterance Selector (Test Data)",
            "type": "debugpy",
            "request": "launch",
            "program": "${workspaceFolder}/using_llms/utterance_selector.py",
            "args": [
                "${workspaceFolder}/projects/gpt5_select_complex_utterances/data/results/test_data_top3_categories.json",
                "${workspaceFolder}/projects/gpt5_select_complex_utterances/data/results/test_selected_utterances.json",
                "19",
                "--increment_per_category=1"
            ],
            "console": "integratedTerminal",
            "cwd": "${workspaceFolder}",
            "justMyCode": true,
            "env": {
                "PYTHONPATH": "${workspaceFolder}"
            }
        },
        {
            "name": "Utterance Selector (Full Production)",
            "type": "debugpy",
            "request": "launch",
            "program": "${workspaceFolder}/using_llms/utterance_selector.py",
            "args": [
                "${workspaceFolder}/projects/gpt5_select_complex_utterances/data/results/filtered_optimal_switching_results.json",
                "${workspaceFolder}/projects/gpt5_select_complex_utterances/data/results/selected_utterances.json",
                "2300",
                "--increment_per_category=2"
            ],
            "console": "integratedTerminal",
            "cwd": "${workspaceFolder}",
            "justMyCode": true,
            "env": {
                "PYTHONPATH": "${workspaceFolder}"
            }
        },
        {
            "name": "Analyze Statistics of Selected Utterances",
            "type": "debugpy",
            "request": "launch",
            "program": "${workspaceFolder}/projects/gpt5_select_complex_utterances/selected_utterance_statistics.py",
            "args": [
                "${workspaceFolder}/projects/gpt5_select_complex_utterances/data/results/selected_utterances.json",
                "--output_path=${workspaceFolder}/projects/gpt5_select_complex_utterances/data/results/selected_utterance_statistics_report.md"
            ],
            "console": "integratedTerminal",
            "cwd": "${workspaceFolder}",
            "justMyCode": true,
            "env": {
                "PYTHONPATH": "${workspaceFolder}"
            }
        },
        {
            "name": "Remove Duplicates from Selected Utterances",
            "type": "debugpy",
            "request": "launch",
            "program": "${workspaceFolder}/projects/gpt5_select_complex_utterances/deduplicate_selected_utterances.py",
            "args": [
                "${workspaceFolder}/projects/gpt5_select_complex_utterances/data/results/selected_utterances.json",
                "${workspaceFolder}/projects/gpt5_select_complex_utterances/data/results/selected_utterances_cleaned.json"
            ],
            "console": "integratedTerminal",
            "cwd": "${workspaceFolder}",
            "justMyCode": true,
            "env": {
                "PYTHONPATH": "${workspaceFolder}"
            }
        },
        {
            "name": "Excel to TSV File",
            "type": "debugpy",
            "request": "launch",
            "program": "${workspaceFolder}/tools/excel_to_tsv.py",
            "args": [
                "${workspaceFolder}/projects/gpt5_gen_complex_utterances/data/test.xlsx",
                "--all_sheets=True",
                "--na_rep=-",
            ],
            "console": "integratedTerminal",
            "cwd": "${workspaceFolder}",
            "justMyCode": true,
            "env": {
                "PYTHONPATH": "${workspaceFolder}"
            }
        },
        // ============================================
        // DATA CONVERSION TOOLKIT - Format Conversion Utilities
        // ============================================
        // Comprehensive data conversion utilities for various formats including:
        // - Text to JSON string conversion and vice versa
        // - JSON formatting (pretty print or minify)
        // - JSON to TSV conversion for SEVAL data format
        // - Batch processing capabilities
        // ============================================
        {
            "name": "🔤 Convert Text to JSON String",
            "type": "debugpy",
            "request": "launch",
            "program": "${workspaceFolder}/tools/data_conversion_toolkit.py",
            "args": [
                "text_to_json",
                "--input_file",
                "${workspaceFolder}/temp/sample_text.txt"
            ],
            "console": "integratedTerminal",
            "cwd": "${workspaceFolder}",
            "justMyCode": true,
            "env": {
                "PYTHONPATH": "${workspaceFolder}"
            }
        },
        {
            "name": "🔤 Convert JSON to MarkDown",
            "type": "debugpy",
            "request": "launch",
            "program": "${workspaceFolder}/tools/data_conversion_toolkit.py",
            "args": [
                "json_to_markdown",
                "--input_file",
                "${workspaceFolder}/temp/temp.json"
            ],
            "console": "integratedTerminal",
            "cwd": "${workspaceFolder}",
            "justMyCode": true,
            "env": {
                "PYTHONPATH": "${workspaceFolder}"
            }
        },
        {
            "name": "🎨 Format JSON - Pretty Print",
            "type": "debugpy",
            "request": "launch",
            "program": "${workspaceFolder}/tools/data_conversion_toolkit.py",
            "args": [
                "format_json",
                "--input_file",
                "${workspaceFolder}/temp/sample.json",
                "--pretty"
            ],
            "console": "integratedTerminal",
            "cwd": "${workspaceFolder}",
            "justMyCode": true,
            "env": {
                "PYTHONPATH": "${workspaceFolder}"
            }
        },
        {
            "name": "🎨 Format JSON - Minify",
            "type": "debugpy",
            "request": "launch",
            "program": "${workspaceFolder}/tools/data_conversion_toolkit.py",
            "args": [
                "format_json",
                "--input_file",
                "${workspaceFolder}/temp/sample.json",
                "--minify"
            ],
            "console": "integratedTerminal",
            "cwd": "${workspaceFolder}",
            "justMyCode": true,
            "env": {
                "PYTHONPATH": "${workspaceFolder}"
            }
        },
        {
            "name": "📊 Convert Playground JSON to TSV (SEVAL Format)",
            "type": "debugpy",
            "request": "launch",
            "program": "${workspaceFolder}/tools/data_conversion_toolkit.py",
            "args": [
                "playground_json_to_tsv",
                "--input_file",
                "${workspaceFolder}/temp/playground_output.json",
                "--num_repeat=1"
            ],
            "console": "integratedTerminal",
            "cwd": "${workspaceFolder}",
            "justMyCode": true,
            "env": {
                "PYTHONPATH": "${workspaceFolder}"
            }
        },
        // ============================================
        // STATISTICAL ANALYSIS - No LLM Dependencies
        // ============================================
        {
            "name": "📊 Email Statistical Analysis (Full)",
            "type": "debugpy",
            "request": "launch",
            "program": "${workspaceFolder}/projects/gpt5_gen_complex_utterances/synthetic_tenants/email_statistics.py",
            "args": [
                "analyze",
                "--input_file=${workspaceFolder}/projects/gpt5_gen_complex_utterances/synthetic_tenants/data/emails.config.json",
                "--output_file=${workspaceFolder}/projects/gpt5_gen_complex_utterances/synthetic_tenants/results/email_statistics_report.json",
                "--detailed_report=true"
            ],
            "console": "integratedTerminal",
            "cwd": "${workspaceFolder}/projects/gpt5_gen_complex_utterances/synthetic_tenants",
            "justMyCode": true,
            "env": {
                "PYTHONPATH": "${workspaceFolder}"
            }
        },
        {
            "name": "📊 Email Statistical Analysis (Quick Overview)",
            "type": "debugpy",
            "request": "launch",
            "program": "${workspaceFolder}/projects/gpt5_gen_complex_utterances/synthetic_tenants/email_statistics.py",
            "args": [
                "quick",
                "--input_file=${workspaceFolder}/projects/gpt5_gen_complex_utterances/synthetic_tenants/data/emails.config.json"
            ],
            "console": "integratedTerminal",
            "cwd": "${workspaceFolder}/projects/gpt5_gen_complex_utterances/synthetic_tenants",
            "justMyCode": true,
            "env": {
                "PYTHONPATH": "${workspaceFolder}"
            }
        },
        {
            "name": "📊 Email Statistical Analysis (Limited Dataset)",
            "type": "debugpy",
            "request": "launch",
            "program": "${workspaceFolder}/projects/gpt5_gen_complex_utterances/synthetic_tenants/email_statistics.py",
            "args": [
                "analyze",
                "--input_file=${workspaceFolder}/projects/gpt5_gen_complex_utterances/synthetic_tenants/data/emails.config.json",
                "--output_file=${workspaceFolder}/projects/gpt5_gen_complex_utterances/synthetic_tenants/results/email_statistics_test.json",
                "--max_items=50",
                "--detailed_report=true"
            ],
            "console": "integratedTerminal",
            "cwd": "${workspaceFolder}/projects/gpt5_gen_complex_utterances/synthetic_tenants",
            "justMyCode": true,
            "env": {
                "PYTHONPATH": "${workspaceFolder}"
            }
        },
        // ============================================
        // Email processing
        // ============================================
        {
            "name": "🏷️  Email Account Analysis (Comprehensive Report)",
            "type": "debugpy",
            "request": "launch",
            "program": "${workspaceFolder}/projects/gpt5_gen_complex_utterances/synthetic_tenants/email_account_analysis.py",
            "args": [
                "generate_comprehensive_report",
                "--output_file=results/comprehensive_account_analysis.md"
            ],
            "console": "integratedTerminal",
            "cwd": "${workspaceFolder}/projects/gpt5_gen_complex_utterances/synthetic_tenants",
            "justMyCode": true,
            "env": {
                "PYTHONPATH": "${workspaceFolder}"
            }
        },
        {
            "name": "🏷️  Email Account Analysis (List All Types)",
            "type": "debugpy",
            "request": "launch",
            "program": "${workspaceFolder}/projects/gpt5_gen_complex_utterances/synthetic_tenants/email_account_analysis.py",
            "args": [
                "list_by_type",
                "all"
            ],
            "console": "integratedTerminal",
            "cwd": "${workspaceFolder}/projects/gpt5_gen_complex_utterances/synthetic_tenants",
            "justMyCode": true,
            "env": {
                "PYTHONPATH": "${workspaceFolder}"
            }
        },
        {
            "name": "📧 Generate User Email Mapping JSON",
            "type": "debugpy",
            "request": "launch",
            "program": "${workspaceFolder}/projects/gpt5_gen_complex_utterances/synthetic_tenants/email_account_analysis.py",
            "args": [
                "generate_user_email_mapping",
                "--output_file=results/user_email_mapping.json"
            ],
            "console": "integratedTerminal",
            "cwd": "${workspaceFolder}/projects/gpt5_gen_complex_utterances/synthetic_tenants",
            "justMyCode": true,
            "env": {
                "PYTHONPATH": "${workspaceFolder}"
            }
        },
        {
            "name": "📧 Extract Merged Account Emails (johndoe)",
            "type": "debugpy",
            "request": "launch",
            "program": "${workspaceFolder}/projects/gpt5_gen_complex_utterances/synthetic_tenants/email_extractor_merged_accounts.py",
            "args": [
                "extract_emails",
                "johndoe",
                "--emails_file=data/emails.config.json",
                "--user_mapping_file=results/user_email_mapping.json",
            ],
            "console": "integratedTerminal",
            "cwd": "${workspaceFolder}/projects/gpt5_gen_complex_utterances/synthetic_tenants",
            "justMyCode": true,
            "env": {
                "PYTHONPATH": "${workspaceFolder}"
            }
        },
        {
            "name": "📧 Extract for Merged Account Emails (Custom)",
            "type": "debugpy",
            "request": "launch",
            "program": "${workspaceFolder}/projects/gpt5_gen_complex_utterances/synthetic_tenants/email_extractor_merged_accounts.py",
            "args": [
                "extract_emails",
                "${input:emailAccount}",
                "--emails_file=data/emails.config.json",
                "--user_mapping_file=results/user_email_mapping.json"
            ],
            "console": "integratedTerminal",
            "cwd": "${workspaceFolder}/projects/gpt5_gen_complex_utterances/synthetic_tenants",
            "justMyCode": true,
            "env": {
                "PYTHONPATH": "${workspaceFolder}"
            }
        },
        {
            "name": "📧 Extract Individual Account Emails (marion.chen)",
            "type": "debugpy",
            "request": "launch",
            "program": "${workspaceFolder}/projects/gpt5_gen_complex_utterances/synthetic_tenants/email_extractor_individual_accounts.py",
            "args": [
                "extract_emails_with_prompt",
                "alex.johnson",
                "--emails_file=data/emails.config.json",
                "--users_file=data/users.config.json"
            ],
            "console": "integratedTerminal",
            "cwd": "${workspaceFolder}/projects/gpt5_gen_complex_utterances/synthetic_tenants",
            "justMyCode": true,
            "env": {
                "PYTHONPATH": "${workspaceFolder}"
            }
        },
        {
            "name": "📊 Individual Email Statistics (All Accounts)",
            "type": "debugpy",
            "request": "launch",
            "program": "${workspaceFolder}/projects/gpt5_gen_complex_utterances/synthetic_tenants/email_statistics_individual.py",
            "args": [
                "individual_account_statistics",
                "--emails_file=data/emails.config.json",
                "--users_file=data/users.config.json",
                "--output_file=results/individual_email_statistics.json",
                "--limit=0"
            ],
            "console": "integratedTerminal",
            "cwd": "${workspaceFolder}/projects/gpt5_gen_complex_utterances/synthetic_tenants",
            "justMyCode": true,
            "env": {
                "PYTHONPATH": "${workspaceFolder}"
            }
        },
        // ============================================
        // TEAMS MESSAGE ANALYTICS (Chat + Channel - Daily Collaboration)
        // Excludes meeting-type chats from LLM prompt generation
        // ============================================
        {
            "name": "💬 Teams Comprehensive Analytics - User Stats & File References (With Channels)",
            "type": "debugpy",
            "request": "launch",
            "program": "${workspaceFolder}/projects/gpt5_gen_complex_utterances/synthetic_tenants/teams_message_analytics.py",
            "args": [
                "generate_comprehensive_analytics",
                "--chats_file=data/chats.config.json",
                "--output_file=results/teams_comprehensive_analytics_with_channels.md",
                "--include_channel_messages=true",
                "--data_folder=data"
            ],
            "console": "integratedTerminal",
            "cwd": "${workspaceFolder}/projects/gpt5_gen_complex_utterances/synthetic_tenants",
            "justMyCode": true,
            "env": {
                "PYTHONPATH": "${workspaceFolder}"
            }
        },
        {
            "name": "💬 Teams Messages + Files + Channels → LLM Prompt [No Meeting Chats] (alex.khan)",
            "type": "debugpy",
            "request": "launch",
            "program": "${workspaceFolder}/projects/gpt5_gen_complex_utterances/synthetic_tenants/teams_message_analytics.py",
            "args": [
                "extract_user_teams_messages_with_files_and_prompt",
                "--user_email=alex.khan",
                "--chats_file=data/chats.config.json",
                "--prompt_file=prompt_teams_gen_complex_utterance.md",
                "--files_folder=data/files",
                "--output_folder=results",
                "--include_channel_messages=true",
                "--data_folder=data"
            ],
            "console": "integratedTerminal",
            "cwd": "${workspaceFolder}/projects/gpt5_gen_complex_utterances/synthetic_tenants",
            "justMyCode": true,
            "env": {
                "PYTHONPATH": "${workspaceFolder}"
            }
        },
        // ============================================
        // MEETINGS & EVENTS ANALYTICS (including the "Meeting" chat type in Chat)
        // ============================================
        {
            "name": "📅 Meetings & Events Analytics - Complete Analysis",
            "type": "debugpy",
            "request": "launch",
            "program": "${workspaceFolder}/projects/gpt5_gen_complex_utterances/synthetic_tenants/meetings_events_analytics.py",
            "args": [
                "generate_meetings_events_analytics",
                "--data_folder=data",
                "--output_file=results/meetings_events_analytics.md"
            ],
            "console": "integratedTerminal",
            "cwd": "${workspaceFolder}/projects/gpt5_gen_complex_utterances/synthetic_tenants",
            "justMyCode": true,
            "env": {
                "PYTHONPATH": "${workspaceFolder}"
            }
        },
        {
            "name": "📅 Meetings & Events → LLM Prompt (alex.khan)",
            "type": "debugpy",
            "request": "launch",
            "program": "${workspaceFolder}/projects/gpt5_gen_complex_utterances/synthetic_tenants/meetings_events_analytics.py",
            "args": [
                "extract_meetings_events_with_prompt",
                "--user_email=alex.khan",
                "--data_folder=data",
                "--min_participants=2",
                "--output_folder=results",
                "--prompt_file=prompt_meetings_gen_complex_utterance.md"
            ],
            "console": "integratedTerminal",
            "cwd": "${workspaceFolder}/projects/gpt5_gen_complex_utterances/synthetic_tenants",
            "justMyCode": true,
            "env": {
                "PYTHONPATH": "${workspaceFolder}"
            }
        },
        {
            "name": "📅 Meetings & Events → LLM Prompt (marion.chen)",
            "type": "debugpy",
            "request": "launch",
            "program": "${workspaceFolder}/projects/gpt5_gen_complex_utterances/synthetic_tenants/meetings_events_analytics.py",
            "args": [
                "extract_meetings_events_with_prompt",
                "--user_email=marion.chen",
                "--data_folder=data",
                "--min_participants=2",
                "--output_folder=results",
                "--prompt_file=prompt_meetings_gen_complex_utterance.md"
            ],
            "console": "integratedTerminal",
            "cwd": "${workspaceFolder}/projects/gpt5_gen_complex_utterances/synthetic_tenants",
            "justMyCode": true,
            "env": {
                "PYTHONPATH": "${workspaceFolder}"
            }
        },
        // --------------------------------------------
        // TIMESTAMP PROMPT GENERATOR
        // Generate LLM prompts to add timestamps to utterances based on email accessibility.
        // Uses external template file (prompt_add_timestamp.md) and processes split TSV files.
        // Manual LLM processing required after prompt generation.
        // --------------------------------------------
        {
            "name": "⏰ Timestamp Prompt Generator - Generate All Account Prompts",
            "type": "debugpy",
            "request": "launch",
            "program": "${workspaceFolder}/projects/gpt5_gen_complex_utterances/synthetic_tenants/timestamp_prompt_generator.py",
            "args": [
                "generate_timestamp_prompts",
                "--split_results_dir=results/split_results",
                "--output_dir=results/timestamp_prompts",
                "--emails_file=data/emails.config.json",
                "--users_file=data/users.config.json"
            ],
            "console": "integratedTerminal",
            "cwd": "${workspaceFolder}/projects/gpt5_gen_complex_utterances/synthetic_tenants",
            "justMyCode": true,
            "env": {
                "PYTHONPATH": "${workspaceFolder}"
            }
        },
        {
            "name": "⏰ Timestamp Prompt Generator - Single Account Test",
            "type": "debugpy",
            "request": "launch",
            "program": "${workspaceFolder}/projects/gpt5_gen_complex_utterances/synthetic_tenants/timestamp_prompt_generator.py",
            "args": [
                "generate_prompt_for_account",
                "alex.johnson",
                "test_utterances.json",
                "test_timestamp_prompt.md",
                "--template_file=prompt_add_timestamp.md"
            ],
            "console": "integratedTerminal",
            "cwd": "${workspaceFolder}/projects/gpt5_gen_complex_utterances/synthetic_tenants",
            "justMyCode": true,
            "env": {
                "PYTHONPATH": "${workspaceFolder}"
            }
        },
        {
            "name": "⏰ Timestamp Prompt Generator - Generate Remaining Prompts",
            "type": "debugpy",
            "request": "launch",
            "program": "${workspaceFolder}/projects/gpt5_gen_complex_utterances/synthetic_tenants/timestamp_prompt_generator.py",
            "args": [
                "generate_remaining_timestamp_prompts",
                "--untimestamped_file=results/utterances_email_untimestamped.tsv",
                "--output_dir=results/timestamp_prompts_remaining",
                "--emails_file=data/emails.config.json",
                "--users_file=data/users.config.json",
                "--template_file=prompt_add_timestamp.md"
            ],
            "console": "integratedTerminal",
            "cwd": "${workspaceFolder}/projects/gpt5_gen_complex_utterances/synthetic_tenants",
            "justMyCode": true,
            "env": {
                "PYTHONPATH": "${workspaceFolder}"
            }
        },
        // ============================================
        // Utterance Timestamper for Seval Data
        // ============================================
        {
            "name": "⏰ File Utterance Timestamper for Seval Data",
            "type": "debugpy",
            "request": "launch",
            "program": "${workspaceFolder}/projects/gpt5_gen_complex_utterances/synthetic_tenants/utterance_timestamper.py",
            "args": [
                "timestamp_file_utterances",
                "results/utterances_email_timestamped.tsv",
                "results/utterances_seval_timestamped.tsv",
                "--files_folder=data/files",
                "--hours_after_files=2.0",
                "--time_window_hours=8.0"
            ],
            "console": "integratedTerminal",
            "cwd": "${workspaceFolder}/projects/gpt5_gen_complex_utterances/synthetic_tenants",
            "justMyCode": true,
            "env": {
                "PYTHONPATH": "${workspaceFolder}"
            }
        },
        {
            "name": "📧 Email Utterance Timestamper for Seval Data",
            "type": "debugpy",
            "request": "launch",
            "program": "${workspaceFolder}/projects/gpt5_gen_complex_utterances/synthetic_tenants/utterance_timestamper.py",
            "args": [
                "timestamp_email_utterances",
                "--utterances_path=results/utterances_seval.tsv",
                "--output_path=results/utterances_email_timestamped.tsv",
                "--timestamp_results_folder=results/timestamp_results",
                "--untimestamped_output_path=results/utterances_email_untimestamped.tsv"
            ],
            "console": "integratedTerminal",
            "cwd": "${workspaceFolder}/projects/gpt5_gen_complex_utterances/synthetic_tenants",
            "justMyCode": true,
            "env": {
                "PYTHONPATH": "${workspaceFolder}"
            }
        },
        // ============================================
        // Files Processing
        // ============================================
        {
            "name": "📁 Files Extractor",
            "type": "debugpy",
            "request": "launch",
            "program": "${workspaceFolder}/projects/gpt5_gen_complex_utterances/synthetic_tenants/files_extractor.py",
            "args": [
                "analyze_folder",
                "--folder_path=data/files",
                "--output_file=results/files_contents.json",
                "--include_subdirs=True"
            ],
            "console": "integratedTerminal",
            "cwd": "${workspaceFolder}/projects/gpt5_gen_complex_utterances/synthetic_tenants",
            "justMyCode": true,
            "env": {
                "PYTHONPATH": "${workspaceFolder}"
            }
        },
        // ============================================
        // File Access Analysis
        // ============================================
        {
            "name": "🔐 File Access Analyzer - Full Analysis",
            "type": "debugpy",
            "request": "launch",
            "program": "${workspaceFolder}/projects/gpt5_gen_complex_utterances/synthetic_tenants/files_individual_extractor.py",
            "args": [
                "analyze_file_access",
                "--config_file=data/files.config.json",
                "--output_file=results/file_access_results.json"
            ],
            "console": "integratedTerminal",
            "cwd": "${workspaceFolder}/projects/gpt5_gen_complex_utterances/synthetic_tenants",
            "justMyCode": true,
            "env": {
                "PYTHONPATH": "${workspaceFolder}"
            }
        },
        {
            "name": "👤 File Access Analyzer - User Summary",
            "type": "debugpy",
            "request": "launch",
            "program": "${workspaceFolder}/projects/gpt5_gen_complex_utterances/synthetic_tenants/files_individual_extractor.py",
            "args": [
                "get_user_accessible_files",
                "--config_file=data/files.config.json",
                "--output_folder=results",
                "--user_email=session.lead"
            ],
            "console": "integratedTerminal",
            "cwd": "${workspaceFolder}/projects/gpt5_gen_complex_utterances/synthetic_tenants",
            "justMyCode": true,
            "env": {
                "PYTHONPATH": "${workspaceFolder}"
            }
        },
        {
            "name": "👤 File Access Analyzer - User Files to Prompt",
            "type": "debugpy",
            "request": "launch",
            "program": "${workspaceFolder}/projects/gpt5_gen_complex_utterances/synthetic_tenants/files_individual_extractor.py",
            "args": [
                "extract_user_file_content_with_prompt",
                "--config_file=data/files.config.json",
                "--output_folder=results",
                "--prompt_file=prompt_file_gen_complex_utterance.md",
                "--user_email=rachael.morgan"
            ],
            "console": "integratedTerminal",
            "cwd": "${workspaceFolder}/projects/gpt5_gen_complex_utterances/synthetic_tenants",
            "justMyCode": true,
            "env": {
                "PYTHONPATH": "${workspaceFolder}"
            }
        },
        // ============================================
        // TSV PROCESSING SUITE - Combined Utilities
        // ============================================
        // Available Functions:
        // 1. llm_tsv_to_seval_tsv - Direct conversion from LLM output to SEVAL format (one-step)
        // 2. cleanup_tsv - Remove quotes and normalize non-ASCII characters
        // 3. split_utterances - Split TSV by segment and email into separate files
        // 4. filter_by_column / analyze_column - SQL-like filtering and analysis
        // 5. validate_file / validate_specific_fields - Field validation and reports
        // 6. check_duplicates / remove_duplicates - Duplicate detection and removal
        // 7. merge_tsv_files - Merge/append two TSV files with header validation
        // ============================================
        {
            "name": "📋 TSV - LLM to SEVAL Direct Conversion (Append Mode)",
            "type": "debugpy",
            "request": "launch",
            "program": "${workspaceFolder}/projects/gpt5_gen_complex_utterances/synthetic_tenants/tsv_processor.py",
            "args": [
                "llm_tsv_to_seval_tsv",
                "--input_file=results/utterances_curr.tsv",
                "--output_file=results/utterances_seval.tsv",
                "--segment=email",
                "--append_mode=True"
            ],
            "console": "integratedTerminal",
            "cwd": "${workspaceFolder}/projects/gpt5_gen_complex_utterances/synthetic_tenants",
            "justMyCode": true,
            "env": {
                "PYTHONPATH": "${workspaceFolder}"
            }
        },
        {
            "name": "📋 TSV - Cleanup (Remove Quotes & Normalize Non-ASCII)",
            "type": "debugpy",
            "request": "launch",
            "program": "${workspaceFolder}/projects/gpt5_gen_complex_utterances/synthetic_tenants/tsv_processor.py",
            "args": [
                "cleanup_tsv",
                "--input_file=results/complex_utterances_syntenants_vertedge_1.tsv",
                "--output_file=results/complex_utterances_syntenants_vertedge_1_cleaned.tsv"
            ],
            "console": "integratedTerminal",
            "cwd": "${workspaceFolder}/projects/gpt5_gen_complex_utterances/synthetic_tenants",
            "justMyCode": true,
            "env": {
                "PYTHONPATH": "${workspaceFolder}"
            }
        },
        {
            "name": "📋 TSV - Split by Segment & Email (Custom Paths)",
            "type": "debugpy",
            "request": "launch",
            "program": "${workspaceFolder}/projects/gpt5_gen_complex_utterances/synthetic_tenants/tsv_processor.py",
            "args": [
                "split_utterances",
                "--input_file=results/utterances_custom.tsv",
                "--output_dir=results/custom_split_results"
            ],
            "console": "integratedTerminal",
            "cwd": "${workspaceFolder}/projects/gpt5_gen_complex_utterances/synthetic_tenants",
            "justMyCode": true,
            "env": {
                "PYTHONPATH": "${workspaceFolder}"
            }
        },
        // ============================================
        // TSV FILTERING - SQL-like Column Filtering
        // ============================================
        {
            "name": "📋 TSV - Filter (Select Rows with Segment = Email)",
            "type": "debugpy",
            "request": "launch",
            "program": "${workspaceFolder}/projects/gpt5_gen_complex_utterances/synthetic_tenants/tsv_processor.py",
            "args": [
                "filter_by_column",
                "Segment", // Column name
                "email", // Column value
                "--input_file=results/utterances_seval_timestamped.tsv",
                "--output_file=results/utterances_seval_email_only.tsv",
                "--show_stats=True"
            ],
            "console": "integratedTerminal",
            "cwd": "${workspaceFolder}/projects/gpt5_gen_complex_utterances/synthetic_tenants",
            "justMyCode": true,
            "env": {
                "PYTHONPATH": "${workspaceFolder}"
            }
        },
        {
            "name": "📋 TSV - Analyze Column (Segment Distribution)",
            "type": "debugpy",
            "request": "launch",
            "program": "${workspaceFolder}/projects/gpt5_gen_complex_utterances/synthetic_tenants/tsv_processor.py",
            "args": [
                "analyze_column",
                "Segment",
                "--input_file=results/utterances_seval_timestamped.tsv"
            ],
            "console": "integratedTerminal",
            "cwd": "${workspaceFolder}/projects/gpt5_gen_complex_utterances/synthetic_tenants",
            "justMyCode": true,
            "env": {
                "PYTHONPATH": "${workspaceFolder}"
            }
        },
        // ============================================
        // TSV VALIDATION
        // ============================================
        {
            "name": "📋 TSV - Validate Complete (Detailed Field Validation)",
            "type": "debugpy",
            "request": "launch",
            "program": "${workspaceFolder}/projects/gpt5_gen_complex_utterances/synthetic_tenants/tsv_processor.py",
            "args": [
                "validate_file",
                "results/utterances_seval.tsv", // input tsv file
                "--show_details=True", // Show detailed issues for each row
                "--max_issues=20", // Limit to first 20 issues
                "--output_report=results/validation_report.json"
            ],
            "console": "integratedTerminal",
            "cwd": "${workspaceFolder}/projects/gpt5_gen_complex_utterances/synthetic_tenants",
            "justMyCode": true,
            "env": {
                "PYTHONPATH": "${workspaceFolder}"
            }
        },
        {
            "name": "📋 TSV - Validate Specific Fields (Required Fields Only)",
            "type": "debugpy",
            "request": "launch",
            "program": "${workspaceFolder}/projects/gpt5_gen_complex_utterances/synthetic_tenants/tsv_processor.py",
            "args": [
                "validate_specific_fields",
                "results/utterances_seval_timestamped.tsv",
                "Utterance,Segment,user_id,timestamp", // Comma-separated required fields
                "--output_report=results/specific_fields_validation.json"
            ],
            "console": "integratedTerminal",
            "cwd": "${workspaceFolder}/projects/gpt5_gen_complex_utterances/synthetic_tenants",
            "justMyCode": true,
            "env": {
                "PYTHONPATH": "${workspaceFolder}"
            }
        },
        {
            "name": "📋 TSV - Check Duplicates (Summary Report)",
            "type": "debugpy",
            "request": "launch",
            "program": "${workspaceFolder}/projects/gpt5_gen_complex_utterances/synthetic_tenants/tsv_processor.py",
            "args": [
                "check_duplicates",
                "results/utterances_seval.tsv" // input file
                // Shows summary statistics only (no detailed row info)
            ],
            "console": "integratedTerminal",
            "cwd": "${workspaceFolder}/projects/gpt5_gen_complex_utterances/synthetic_tenants",
            "justMyCode": true,
            "env": {
                "PYTHONPATH": "${workspaceFolder}"
            }
        },
        {
            "name": "📋 TSV - Check Duplicates (Detailed Report)",
            "type": "debugpy",
            "request": "launch",
            "program": "${workspaceFolder}/projects/gpt5_gen_complex_utterances/synthetic_tenants/tsv_processor.py",
            "args": [
                "check_duplicates",
                "results/utterances_seval_timestamped.tsv",
                "--show_details=True", // Show detailed duplicate information
                "--max_duplicates=20", // Show first 20 duplicate groups
                "--output_report=results/duplicate_report.json" // Save JSON report
            ],
            "console": "integratedTerminal",
            "cwd": "${workspaceFolder}/projects/gpt5_gen_complex_utterances/synthetic_tenants",
            "justMyCode": true,
            "env": {
                "PYTHONPATH": "${workspaceFolder}"
            }
        },
        {
            "name": "📋 TSV - Remove Duplicates (Keep First Occurrence)",
            "type": "debugpy",
            "request": "launch",
            "program": "${workspaceFolder}/projects/gpt5_gen_complex_utterances/synthetic_tenants/tsv_processor.py",
            "args": [
                "remove_duplicates",
                "results/utterances_seval_timestamped.tsv", // Input file
                "results/utterances_no_duplicates.tsv", // Output file (deduplicated)
                "--show_stats=True" // Display removal statistics
            ],
            "console": "integratedTerminal",
            "cwd": "${workspaceFolder}/projects/gpt5_gen_complex_utterances/synthetic_tenants",
            "justMyCode": true,
            "env": {
                "PYTHONPATH": "${workspaceFolder}"
            }
        },
        {
            "name": "📋 TSV - Merge Two Files (Header Validation)",
            "type": "debugpy",
            "request": "launch",
            "program": "${workspaceFolder}/projects/gpt5_gen_complex_utterances/synthetic_tenants/tsv_processor.py",
            "args": [
                "merge_tsv_files",
                "--file1=results/complex_utterances_syntenants_vertedge_1_cleaned.tsv", // First file (base)
                "--file2=results/utterances_seval_cleaned.tsv", // Second file (append)
                "--output_file=results/complex_utterances_syntenants_vertedge_all.tsv" // Merged output
            ],
            "console": "integratedTerminal",
            "cwd": "${workspaceFolder}/projects/gpt5_gen_complex_utterances/synthetic_tenants",
            "justMyCode": true,
            "env": {
                "PYTHONPATH": "${workspaceFolder}"
            }
        },
        // ============================================
        // SEVAL Job Processing
        // ============================================
        {
            "name": "🔍 Search Query to Find Matching Raw Seval Files",
            "type": "debugpy",
            "request": "launch",
            "program": "${workspaceFolder}/projects/seval/seval_analysis_toolkit.py",
            "args": [
                "search_query",
                "--query=Search my Sent Items for \"DB_Migration_Test_",
                "--search_dir=seval_data/232361_scraping_raw_data_output",
                "--exp=both",
                "--threads=16"
            ],
            "console": "integratedTerminal",
            "cwd": "${workspaceFolder}/projects/seval",
            "justMyCode": true,
            "env": {
                "PYTHONPATH": "${workspaceFolder}"
            }
        },
        {
            "name": "📋 Generate Query Mappings (SEVAL)",
            "type": "debugpy",
            "request": "launch",
            "program": "${workspaceFolder}/projects/seval/seval_analysis_toolkit.py",
            "args": [
                "extract_query_mappings",
                "--threads=16",
                "--search_dir=seval_data/232361_scraping_raw_data_output",
                "--output_file=results/query_file_mappings.tsv"
            ],
            "console": "integratedTerminal",
            "cwd": "${workspaceFolder}/projects/seval",
            "justMyCode": true,
            "env": {
                "PYTHONPATH": "${workspaceFolder}"
            }
        },
        {
            "name": "⚡ Fast Search Using Mappings (SEVAL)",
            "type": "debugpy",
            "request": "launch",
            "program": "${workspaceFolder}/projects/seval/seval_analysis_toolkit.py",
            "args": [
                "search_using_mappings",
                "--query=Aggregate OTA test results",
                "--mappings_file=results/query_file_mappings.tsv",
                "--threads=16"
            ],
            "console": "integratedTerminal",
            "cwd": "${workspaceFolder}/projects/seval",
            "justMyCode": true,
            "env": {
                "PYTHONPATH": "${workspaceFolder}"
            }
        },
        {
            "name": "🔍 Search with Console Stats & File Output (SEVAL)",
            "type": "debugpy",
            "request": "launch",
            "program": "${workspaceFolder}/projects/seval/seval_analysis_toolkit.py",
            "args": [
                "analyze_search_results",
                "--mappings_file=results/query_file_mappings.tsv",
                "--output_file=results/search_stats_with_console.tsv",
                "--search_dir=seval_data/232361_scraping_raw_data_output",
                "--threads=8",
                "--max_queries=20"
            ],
            "console": "integratedTerminal",
            "cwd": "${workspaceFolder}/projects/seval",
            "justMyCode": true,
            "env": {
                "PYTHONPATH": "${workspaceFolder}"
            }
        },
        {
            "name": "📊 Extract Model Statistics (SEVAL)",
            "type": "debugpy",
            "request": "launch",
            "program": "${workspaceFolder}/projects/seval/seval_analysis_toolkit.py",
            "args": [
                "extract_model_statistics",
                "--input_dir=seval_data/206826_scraping_raw_data_output",
                "--output_file=results/model_statistics.tsv",
                "--exp=control",
                "--threads=16"
            ],
            "console": "integratedTerminal",
            "cwd": "${workspaceFolder}/projects/seval",
            "justMyCode": true,
            "env": {
                "PYTHONPATH": "${workspaceFolder}"
            }
        },
        {
            "name": "📊 Extract Model Statistics with Utterances (SEVAL)",
            "type": "debugpy",
            "request": "launch",
            "program": "${workspaceFolder}/projects/seval/seval_analysis_toolkit.py",
            "args": [
                "extract_model_statistics",
                "--input_dir=seval_data/206826_scraping_raw_data_output",
                "--output_file=results/model_statistics_with_utterances.tsv",
                "--exp=control",
                "--threads=8"
            ],
            "console": "integratedTerminal",
            "cwd": "${workspaceFolder}/projects/seval",
            "justMyCode": true,
            "env": {
                "PYTHONPATH": "${workspaceFolder}"
            }
        },
        {
            "name": "🔍 Search Results Analysis (SEVAL) -- Debugging",
            "type": "debugpy",
            "request": "launch",
            "program": "${workspaceFolder}/projects/seval/seval_analysis_toolkit.py",
            "args": [
                "analyze_search_results",
                "--mappings_file=results/query_file_mappings.tsv",
                "--output_file=results/search_results_analysis.tsv",
                "--search_dir=seval_data/232361_scraping_raw_data_output",
                "--threads=8",
                "--max_queries=50"
            ],
            "console": "integratedTerminal",
            "cwd": "${workspaceFolder}/projects/seval",
            "justMyCode": true,
            "env": {
                "PYTHONPATH": "${workspaceFolder}"
            }
        },
        {
            "name": "🔍 Search Results Analysis - Full (SEVAL)",
            "type": "debugpy",
            "request": "launch",
            "program": "${workspaceFolder}/projects/seval/seval_analysis_toolkit.py",
            "args": [
                "analyze_search_results",
                "--mappings_file=results/query_file_mappings.tsv",
                "--search_dir=seval_data/232361_scraping_raw_data_output",
                "--output_file=results/232361_search_results_analysis_full.tsv",
                "--threads=16"
            ],
            "console": "integratedTerminal",
            "cwd": "${workspaceFolder}/projects/seval",
            "justMyCode": true,
            "env": {
                "PYTHONPATH": "${workspaceFolder}"
            }
        },
        {
            "name": "📋 SEVAL - Extract Query Mappings",
            "type": "debugpy",
            "request": "launch",
            "program": "${workspaceFolder}/projects/seval/seval_analysis_toolkit.py",
            "args": [
                "extract_query_mappings",
                "--threads=8",
                "--output_file=results/query_file_mappings.tsv"
            ],
            "console": "integratedTerminal",
            "cwd": "${workspaceFolder}/projects/seval",
            "justMyCode": true,
            "env": {
                "PYTHONPATH": "${workspaceFolder}"
            }
        },
        // ============================================
        // SEVAL CONVERSATION DETAILS EXTRACTION
        // ============================================
        // Extract detailed conversation analysis from SEVAL files including:
        // - Tool call analysis and frequency
        // - Search result extraction and analysis  
        // - User message patterns
        // - Conversation flow analysis
        // - Search efficiency metrics
        // - Markdown report generation
        // ============================================
        {
            "name": "Extract Conversation Details From A Seval Control/Experiment File",
            "type": "debugpy",
            "request": "launch",
            "program": "${workspaceFolder}/projects/seval/seval_analysis_toolkit.py",
            "args": [
                "extract_conversation_details",
                "--input_file",
                "${workspaceFolder}/projects/seval/seval_data/232361_scraping_raw_data_output/experiment_sydney_response_4151ee7d-951f-4110-8b32-798fee21f56a_235d8666-86cf-4c10-ad21-2f82f15542b4.json",
                "--output_file",
                "${workspaceFolder}/projects/seval/results/232361_experiment_4151ee7d_conv_details.md"
            ],
            "console": "integratedTerminal",
            "cwd": "${workspaceFolder}/projects/seval",
            "justMyCode": true,
            "env": {
                "PYTHONPATH": "${workspaceFolder}"
            }
        },
        // ============================================
        // SEVAL METRICS ANALYSIS - Comprehensive Statistical Analysis
        // ============================================
        // Available Functions:
        // 1. comprehensive_analysis - Full A/B testing analysis (statistical tests, paired analysis, win/loss, distribution)
        // 2. list_metrics - List all available metrics
        // 3. paired_analysis - Detailed paired analysis only (missing data, win/loss, distribution)  
        //
        // Each function can be called directly via Fire CLI:
        // python seval_metrics_analysis.py <function_name> <arguments>
        // ============================================
        {
            "name": "SEVAL Comprehensive Analysis (sbsleov3_score)",
            "type": "debugpy",
            "request": "launch",
            "program": "${workspaceFolder}/projects/seval/seval_metrics_analysis.py",
            "console": "integratedTerminal",
            "cwd": "${workspaceFolder}/projects/seval",
            "justMyCode": true,
            "args": [
                "comprehensive_analysis",
                "seval_data/123665_metrics",
                "--metrics=sbsleov3_sbsleov3_score",
                "--segment_column=segment 2",
                "--paired_test=True",
                "--output_file=results/123665_sbsleov3_comprehensive_analysis.md"
            ],
            "env": {
                "PYTHONPATH": "${workspaceFolder}"
            }
        },
        {
            "name": "SEVAL Comprehensive Analysis (citedcg_one_centric)",
            "type": "debugpy",
            "request": "launch",
            "program": "${workspaceFolder}/projects/seval/seval_metrics_analysis.py",
            "console": "integratedTerminal",
            "cwd": "${workspaceFolder}/projects/seval",
            "justMyCode": true,
            "args": [
                "comprehensive_analysis",
                "seval_data/123665_metrics",
                "--metrics=citedcg_one_centric",
                "--segment_column=segment 2",
                "--paired_test=True",
                "--output_file=results/123665_citedcg_one_centric_comprehensive_analysis.md"
            ],
            "env": {
                "PYTHONPATH": "${workspaceFolder}"
            }
        },
        {
            "name": "SEVAL Paired Analysis Only (sbsleov3_score)",
            "type": "debugpy",
            "request": "launch",
            "program": "${workspaceFolder}/projects/seval/seval_metrics_analysis.py",
            "console": "integratedTerminal",
            "cwd": "${workspaceFolder}/projects/seval",
            "justMyCode": true,
            "args": [
                "paired_analysis",
                "seval_data/123665_metrics",
                "sbsleov3_sbsleov3_score",
                "--segment_column=segment 2",
                "--output_file=results/123665_sbsleov3_paired_analysis_only.md"
            ],
            "env": {
                "PYTHONPATH": "${workspaceFolder}"
            }
        },
        {
            "name": "SEVAL Paired Analysis Only (citedcg_one_centric)",
            "type": "debugpy",
            "request": "launch",
            "program": "${workspaceFolder}/projects/seval/seval_metrics_analysis.py",
            "console": "integratedTerminal",
            "cwd": "${workspaceFolder}/projects/seval",
            "justMyCode": true,
            "args": [
                "paired_analysis",
                "seval_data/123665_metrics",
                "citedcg_one_centric",
                "--segment_column=segment 2",
                "--output_file=results/123665_citedcg_one_centric_paired_analysis_only.md"
            ],
            "env": {
                "PYTHONPATH": "${workspaceFolder}"
            }
        },
        {
            "name": "SEVAL Export Win/Loss Utterances (citedcg_one_centric)",
            "type": "debugpy",
            "request": "launch",
            "program": "${workspaceFolder}/projects/seval/seval_metrics_analysis.py",
            "console": "integratedTerminal",
            "cwd": "${workspaceFolder}/projects/seval",
            "justMyCode": true,
            "args": [
                "export_win_loss_utterances",
                "seval_data/123665_metrics",
                "citedcg_one_centric",
                "--output_dir=results",
                "--segment_column=segment 2",
                "--min_difference=0.0"
            ],
            "env": {
                "PYTHONPATH": "${workspaceFolder}"
            }
        },
        {
            "name": "SEVAL Export Win/Loss Utterances (sbsleov3_score)",
            "type": "debugpy",
            "request": "launch",
            "program": "${workspaceFolder}/projects/seval/seval_metrics_analysis.py",
            "console": "integratedTerminal",
            "cwd": "${workspaceFolder}/projects/seval",
            "justMyCode": true,
            "args": [
                "export_win_loss_utterances",
                "seval_data/123665_metrics",
                "sbsleov3_sbsleov3_score",
                "--output_dir=results",
                "--segment_column=segment 2",
                "--min_difference=0.0"
            ],
            "env": {
                "PYTHONPATH": "${workspaceFolder}"
            }
        },
        {
            "name": "SEVAL Export Two Jobs Utterances - Single File (123665 + 232361)",
            "type": "debugpy",
            "request": "launch",
            "program": "${workspaceFolder}/projects/seval/seval_metrics_analysis.py",
            "console": "integratedTerminal",
            "cwd": "${workspaceFolder}/projects/seval",
            "justMyCode": true,
            "args": [
                "export_two_jobs_utterances",
                "--job1_metrics_path=seval_data/123665_metrics",
                "--job2_metrics_path=seval_data/232361_metrics",
                "--metric=citedcg_one_centric",
                "--output_file=results/123665_232361_citedcg_one_centric_all_utterances.tsv"
            ],
            "env": {
                "PYTHONPATH": "${workspaceFolder}"
            }
        },
        {
            "name": "SEVAL List All Available Metrics",
            "type": "debugpy",
            "request": "launch",
            "program": "${workspaceFolder}/projects/seval/seval_metrics_analysis.py",
            "console": "integratedTerminal",
            "cwd": "${workspaceFolder}/projects/seval",
            "justMyCode": true,
            "args": [
                "list_metrics",
                "seval_data/232361_metrics"
            ],
            "env": {
                "PYTHONPATH": "${workspaceFolder}"
            }
        },
        // ============================================
        // FILTER TREATMENT WINNERS FROM SEVAL RESULTS
        // ============================================
        // Filter test data based on SEVAL job comparison results
        // Selects non-conflicting treatment wins:
        //   - Both jobs win (gain > 0 for both), OR
        //   - One job wins while other is tie (gain == 0) or missing (NaN)
        // Excludes conflicts where one job wins and the other loses
        // ============================================
        {
            "name": "🏆 Filter Non-Conflicting Treatment Winners",
            "type": "debugpy",
            "request": "launch",
            "program": "${workspaceFolder}/projects/gpt5_gen_complex_utterances/synthetic_tenants/filter_treatment_winners.py",
            "console": "integratedTerminal",
            "cwd": "${workspaceFolder}/projects/gpt5_gen_complex_utterances/synthetic_tenants",
            "justMyCode": true,
            "args": [
                "--seval_results_file=../../seval/results/123665_232361_citedcg_one_centric_all_utterances.tsv",
                "--test_data_file=results/complex_utterances_syntenants_vertedge_all.tsv",
                "--output_file=results/complex_utterances_syntenants_vertedge_selected.tsv"
            ],
            "env": {
                "PYTHONPATH": "${workspaceFolder}"
            }
        }
    ]
}